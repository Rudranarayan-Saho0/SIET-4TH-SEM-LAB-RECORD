import sqlite3
import requests

# Initialize database
def init_db():
    conn = sqlite3.connect("github_users.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        username TEXT UNIQUE,
                        name TEXT,
                        public_repos INTEGER,
                        followers INTEGER
                    )''')
    conn.commit()
    conn.close()

# Fetch user details from GitHub API
def fetch_github_user(username):
    url = f"https://api.github.com/users/{username}"
    response = requests.get(url)
    
    if response.status_code == 200:
        return response.json()
    else:
        print("User not found or API limit reached.")
        return None

# Store user data in SQLite
def store_user_data(user_data):
    conn = sqlite3.connect("github_users.db")
    cursor = conn.cursor()
    
    cursor.execute("INSERT OR IGNORE INTO users (username, name, public_repos, followers) VALUES (?, ?, ?, ?)", 
                   (user_data["login"], user_data.get("name", "N/A"), user_data["public_repos"], user_data["followers"]))
    
    conn.commit()
    conn.close()
    print(f"User {user_data['login']} data stored successfully.")

# Retrieve stored users
def retrieve_users():
    conn = sqlite3.connect("github_users.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    
    conn.close()
    
    if users:
        for user in users:
            print(user)
    else:
        print("No user data available.")

# Main function
if _name_ == "_main_":
    init_db()
    
    username = input("Enter GitHub username: ")
    user_data = fetch_github_user(username)
    
    if user_data:
        store_user_data(user_data)
    
    print("\nStored GitHub Users:")
    retrieve_users()